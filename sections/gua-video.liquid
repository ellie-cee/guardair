{{ 'video-section.css' | asset_url | stylesheet_tag }}
{{ 'component-deferred-media.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;}

  @media screen and (min-width: 750px) {
.section-{{ section.id }}-padding {padding-top: {{ section.settings.padding_top }}px;padding-bottom: {{ section.settings.padding_bottom }}px;}
  }
{%- endstyle -%}

{% if section.settings.variant_video %}
        {% capture variant_video %}{% render 'gua-variant-metafield',variant_metafield:section.setting.variant_video, product:product %}{% endcapture %}
{% endif %}

<p>{{ section.settings.variant_video }} --- {{ variant_video }}</p>
{%- liquid

  assign video_id = section.settings.video.id | default: section.settings.video_url.id
  assign video_alt = section.settings.video.alt | default: section.settings.description
  assign alt = 'sections.video.load_video' | t: description: video_alt | escape
  assign poster = section.settings.video.preview_image | default: section.settings.cover_image

  if section.settings.video != null
    assign ratio_diff = section.settings.video.aspect_ratio | minus: poster.aspect_ratio | abs
    if ratio_diff < 0.01 and ratio_diff > 0
      assign fix_ratio = true
    endif
  endif
-%}

{%- capture sizes -%}
  {% if section.settings.full_width -%}
    100vw
  {%- else -%}
    (min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 }}px, (min-width: 750px)
    calc(100vw - 10rem), 100vw
  {%- endif %}
{%- endcapture -%}

<div {% if section.settings.anchor_id != blank %}id="{{ section.settings.anchor_id }}"{% endif %} class="color-{{ section.settings.color_scheme }} gradient">
  <div class="video-section isolate{% unless section.settings.full_width %} page-width{% endunless %} section-{{ section.id }}-padding">
    <div {% if section.settings.full_width %}class="page-width"{% endif %}>
      {%- unless section.settings.heading == blank -%}
        <div class="title-wrapper title-wrapper--no-top-margin{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
          <h2 class="title inline-richtext {{ section.settings.heading_size }}">{{ section.settings.heading }}</h2>
        </div>
      {%- endunless -%}
    </div>
    <div class="video-section__media"{% if poster != null %}style="--ratio-percent: {{ 1 | divided_by: poster.aspect_ratio | times: 100 }}%;"{% endif %}>
      <div class="video-container" data-video-id="{{ video_id }}" id="youtube-video-{{ section.id }}">
        <button
          id="Deferred-Poster-Modal-{{ video_id }}"
          class="video-section__poster media deferred-media__poster media--landscape"
          type="button"
          aria-label="{{ alt }}"
          onclick="playVideo('{{ video_id }}', '{{ section.id }}')"
        >
          {%- if poster != null -%}
            {{
              poster
              | image_url: width: 3840
              | image_tag: sizes: sizes, widths: '375, 750, 1100, 1500, 1780, 2000, 3000, 3840', alt: alt
            }}
          {%- else -%}
            {{ 'hero-apparel-3' | placeholder_svg_tag: 'placeholder-svg placeholder' }}
          {%- endif -%}
          <span class="deferred-media__poster-button motion-reduce">
            {%- render 'icon-play' -%}
          </span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function loadYouTubeAPI() {
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
}

function playVideo(videoId, sectionId) {
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('youtube-video-' + sectionId, {
      videoId: videoId,
      events: {
        'onReady': onPlayerReady
      }
    });
  }
  
  function onPlayerReady(event) {
    event.target.playVideo();
  }
  
  if (typeof YT == 'undefined' || typeof YT.Player == 'undefined') {
    window.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;
    loadYouTubeAPI();
  } else {
    onYouTubeIframeAPIReady();
  }
}

document.addEventListener("DOMContentLoaded", function() {
  var playButtons = document.querySelectorAll('.video-section__poster-button');
  playButtons.forEach(function(button) {
    button.addEventListener('click', function() {
      var videoId = this.closest('.video-container').getAttribute('data-video-id');
      var sectionId = this.closest('.video-container').getAttribute('id').replace('youtube-video-', '');
      playVideo(videoId, sectionId);
    });
  });
});

</script>

{% schema %}
{
  "name": "t:sections.video.name",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "default": "Video",
      "label": "t:sections.video.settings.heading.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "checkbox",
      "id": "enable_video_looping",
      "label": "t:sections.video.settings.enable_video_looping.label",
      "default": false
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__1.content"
    },
    {
      "type": "video",
      "id": "video",
      "label": "t:sections.video.settings.video.label"
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__2.content"
    },
    {
      "type": "paragraph",
      "content": "t:sections.video.settings.paragraph.content"
    },
    {
      "type": "video_url",
      "id": "video_url",
      "accept": ["youtube", "vimeo"],
      "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc",
      "label": "t:sections.video.settings.video_url.label",
      "info": "t:sections.video.settings.video_url.info"
    },
    {
      "type": "image_picker",
      "id": "cover_image",
      "label": "t:sections.video.settings.cover_image.label"
    },
    {
      "type": "text",
      "id": "description",
      "label": "t:sections.video.settings.description.label",
      "info": "t:sections.video.settings.description.info"
    },
    {
      "type": "header",
      "content": "Variant Metafield Mapping"
    },
    {
      "type": "text",
      "id": "variant_video",
      "label": "Video Metafield",
      "info": "Input the variant metafield namespace and key like custom.video"
    },
    {
      "type": "text",
      "id": "variant_thumbnail",
      "label": "Thumbnail Metafield",
      "info": "Input the variant metafield namespace and key like custom.video_image"
    },       
    {
      "type": "header",
      "content": "t:sections.video.settings.header__3.content"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.video.settings.full_width.label",
      "default": false
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    },
      {
        "type": "text",
        "id": "anchor_id",
        "label": "Anchor ID"
      }
  ],
  "presets": [
    {
      "name": "GUA Video",
      "category":"Guardair"
    }
  ]
}
{% endschema %}